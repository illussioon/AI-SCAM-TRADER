import { ref, computed } from 'vue'
import { defineStore } from 'pinia'
import { useApi } from '../composables/useApi.js'
import { useTelegramStore } from './telegram.js'

export const useUserStore = defineStore('user', () => {
  // API –∫–æ–º–ø–æ–∑–∞–±–ª
  const api = useApi()
  
  // Telegram store –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id
  const telegramStore = useTelegramStore()
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userData = ref(null)
  const isLoading = ref(false)
  const isInitialized = ref(false)
  const lastUpdated = ref(null)
  const error = ref(null)
  
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  let updateInterval = null
  
  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const hasUserData = computed(() => userData.value !== null)
  
  const balance = computed(() => userData.value?.balance || '0.00')
  const stakeBalance = computed(() => userData.value?.stake_balance || '0.00') 
  const profitAll = computed(() => userData.value?.profit_all || '0.00')
  const partnersBalance = computed(() => userData.value?.partners_balance || '0.00')
  
  const userInfo = computed(() => ({
    id: userData.value?.id || null,
    username: userData.value?.username || null,
    telegramId: userData.value?.telegram_id || null,
    ref: userData.value?.ref || null,
    createAccount: userData.value?.create_account || null
  }))
  
  const xpInfo = computed(() => {
    if (!userData.value?.xp) {
      return {
        raw: '0/100',
        current: 0,
        max: 100,
        percentage: 0,
        level: 1
      }
    }
    return userData.value.xp
  })
  
  // –ú–µ—Ç–æ–¥—ã
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  const fetchUserData = async () => {
    try {
      isLoading.value = true
      error.value = null
      
      // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ telegram store
      const telegramId = telegramStore.userId
      
      if (!telegramId) {
        throw new Error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}...`)
      
      const response = await api.getUserStats(telegramId)
      
      if (response.success && response.data) {
        userData.value = response.data
        lastUpdated.value = new Date()
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData.value)
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
      error.value = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (err.message?.includes('404') || err.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        await createUserIfNotExists()
      }
    } finally {
      isLoading.value = false
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  const createUserIfNotExists = async () => {
    try {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ telegram store
      const result = await telegramStore.createUserOnServer()
      
      if (result?.success) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        await fetchUserData()
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
      error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    }
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  const startAutoUpdate = (intervalMs = 30000) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    stopAutoUpdate()
    
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ ${intervalMs/1000} —Å–µ–∫—É–Ω–¥`)
    
    updateInterval = setInterval(async () => {
      if (!isLoading.value) {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
        await fetchUserData()
      }
    }, intervalMs)
  }
  
  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  const stopAutoUpdate = () => {
    if (updateInterval) {
      clearInterval(updateInterval)
      updateInterval = null
      console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    }
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  const initialize = async () => {
    if (isInitialized.value) return
    
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
      
      // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ telegram store
      if (!telegramStore.isInitialized) {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram...')
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ telegram
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await fetchUserData()
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      startAutoUpdate(30000) // 30 —Å–µ–∫—É–Ω–¥
      
      isInitialized.value = true
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', err)
      error.value = err.message || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'
    }
  }
  
  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  const refreshUserData = async () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    await fetchUserData()
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ logout –∏–ª–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   */
  const clearUserData = () => {
    stopAutoUpdate()
    userData.value = null
    isInitialized.value = false
    lastUpdated.value = null
    error.value = null
    console.log('üßπ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã')
  }
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    userData,
    isLoading,
    isInitialized,
    lastUpdated,
    error,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    hasUserData,
    balance,
    stakeBalance,
    profitAll,
    partnersBalance,
    userInfo,
    xpInfo,
    
    // –ú–µ—Ç–æ–¥—ã
    initialize,
    fetchUserData,
    refreshUserData,
    startAutoUpdate,
    stopAutoUpdate,
    clearUserData,
    createUserIfNotExists
  }
})






