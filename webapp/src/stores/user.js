import { ref, computed } from 'vue'
import { defineStore } from 'pinia'
import { useApi } from '../composables/useApi.js'
import { useTelegramStore } from './telegram.js'

export const useUserStore = defineStore('user', () => {
  // API –∫–æ–º–ø–æ–∑–∞–±–ª
  const api = useApi()
  
  // Telegram store –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id
  const telegramStore = useTelegramStore()
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userData = ref(null)
  const isLoading = ref(false)
  const isInitialized = ref(false)
  const lastUpdated = ref(null)
  const error = ref(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
  const stakeData = ref({
    currentTariff: 'TON',
    tariffName: 'TON',
    tariffIcon: '/icon/ton.svg',
    stakeBalance: 0,
    accumulatedProfit: 0,
    dailyProfitRate: 1.7,
    minAmount: 500,
    maxAmount: 10000,
    balance: 0,
    totalProfit: 0
  })
  const isStakeLoading = ref(false)
  const stakeLastUpdated = ref(null)
  const stakeError = ref(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const referralData = ref({
    activePartners: 0,
    level1Partners: 0,
    level23Partners: 0,
    totalPartners: 0,
    level1Active: 0,
    level23Active: 0
  })
  const isReferralLoading = ref(false)
  const referralLastUpdated = ref(null)
  const referralError = ref(null)
  
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  let updateInterval = null
  
  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const hasUserData = computed(() => userData.value !== null)
  
  const balance = computed(() => userData.value?.balance || '0.00')
  const stakeBalance = computed(() => userData.value?.stake_balance || '0.00') 
  const profitAll = computed(() => userData.value?.profit_all || '0.00')
  const partnersBalance = computed(() => userData.value?.partners_balance || '0.00')
  
  const userInfo = computed(() => ({
    id: userData.value?.id || null,
    username: userData.value?.username || null,
    telegramId: userData.value?.telegram_id || null,
    ref: userData.value?.ref || null,
    createAccount: userData.value?.create_account || null
  }))
  
  const xpInfo = computed(() => {
    if (!userData.value?.xp) {
      return {
        raw: '0/100',
        current: 0,
        max: 100,
        percentage: 0,
        level: 1
      }
    }
    return userData.value.xp
  })
  
  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞
  const hasActiveStake = computed(() => stakeData.value.stakeBalance > 0)
  const canInvest = computed(() => stakeData.value.balance >= stakeData.value.minAmount)
  const canCollect = computed(() => stakeData.value.accumulatedProfit > 0)
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–µ–π–∫–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  const availableTariff = computed(() => {
    const stakeBalance = stakeData.value.stakeBalance
    
    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏)
    if (stakeBalance >= 100000) return 'USDT' // 100,000‚ÇΩ
    if (stakeBalance >= 10000) return 'ETH'   // 10,000‚ÇΩ
    return 'TON' // –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
  })
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
  const canUpgradeTariff = computed(() => {
    return availableTariff.value !== stakeData.value.currentTariff
  })
  
  const formattedStakeBalance = computed(() => {
    return stakeData.value.stakeBalance.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    })
  })
  
  const formattedAccumulatedProfit = computed(() => {
    return stakeData.value.accumulatedProfit.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 6
    })
  })
  
  // –ú–µ—Ç–æ–¥—ã
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  const fetchUserData = async () => {
    try {
      isLoading.value = true
      error.value = null
      
      // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ telegram store
      const telegramId = telegramStore.userId
      
      if (!telegramId) {
        throw new Error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}...`)
      
      const response = await api.getUserStats(telegramId)
      
      if (response.success && response.data) {
        userData.value = response.data
        lastUpdated.value = new Date()
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData.value)
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
      error.value = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (err.message?.includes('404') || err.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        await createUserIfNotExists()
      }
    } finally {
      isLoading.value = false
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  const createUserIfNotExists = async () => {
    try {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ telegram store
      const result = await telegramStore.createUserOnServer()
      
      if (result?.success) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        await fetchUserData()
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
      error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  const fetchStakeData = async () => {
    try {
      isStakeLoading.value = true
      stakeError.value = null
      
      const telegramId = telegramStore.userId
      if (!telegramId) {
        throw new Error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId)
      
      const response = await api.get(`/api/stake/stats?telegram_id=${telegramId}`)
      
      if (response.success && response.data) {
        stakeData.value = {
          currentTariff: response.data.current_tariff,
          tariffName: response.data.tariff_name,
          tariffIcon: response.data.tariff_icon,
          stakeBalance: response.data.stake_balance,
          accumulatedProfit: response.data.accumulated_profit,
          dailyProfitRate: response.data.daily_profit_rate,
          minAmount: response.data.min_amount,
          maxAmount: response.data.max_amount,
          balance: response.data.balance,
          totalProfit: response.data.total_profit
        }
        
        stakeLastUpdated.value = new Date()
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stakeData.value)
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞')
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞:', err)
      stakeError.value = err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞'
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      stakeData.value = {
        currentTariff: 'TON',
        tariffName: 'TON',
        tariffIcon: '/icon/ton.svg',
        stakeBalance: 0,
        accumulatedProfit: 0,
        dailyProfitRate: 1.7,
        minAmount: 500,
        maxAmount: 10000,
        balance: userData.value?.balance || 0,
        totalProfit: 0
      }
    } finally {
      isStakeLoading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  const fetchReferralData = async () => {
    try {
      isReferralLoading.value = true
      referralError.value = null
      
      const telegramId = telegramStore.userId
      if (!telegramId) {
        throw new Error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId)
      
      const response = await api.get(`/api/referral/detailed-stats?telegram_id=${telegramId}`)
      
      if (response.success && response.data) {
        referralData.value = {
          activePartners: response.data.active_partners || 0,
          level1Partners: response.data.level1_partners || 0,
          level23Partners: response.data.level23_partners || 0,
          totalPartners: response.data.total_partners || 0,
          level1Active: response.data.level1_active || 0,
          level23Active: response.data.level23_active || 0
        }
        
        referralLastUpdated.value = new Date()
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', referralData.value)
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err)
      referralError.value = err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      referralData.value = {
        activePartners: 0,
        level1Partners: 0,
        level23Partners: 0,
        totalPartners: 0,
        level1Active: 0,
        level23Active: 0
      }
    } finally {
      isReferralLoading.value = false
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  const updateStakeData = (newData) => {
    if (newData) {
      const oldTariff = stakeData.value.currentTariff
      Object.assign(stakeData.value, newData)
      stakeLastUpdated.value = new Date()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
      const newTariff = availableTariff.value
      if (newTariff !== oldTariff) {
        console.log(`üéâ –¢–∞—Ä–∏—Ñ –ø–æ–≤—ã—à–µ–Ω: ${oldTariff} ‚Üí ${newTariff} (—Å—Ç–µ–π–∫ –±–∞–ª–∞–Ω—Å: ${stakeData.value.stakeBalance}‚ÇΩ)`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        setTimeout(() => {
          fetchStakeData()
        }, 1000)
      }
      
      console.log('üîÑ –î–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', stakeData.value)
    }
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  const startAutoUpdate = (intervalMs = 30000) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    stopAutoUpdate()
    
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ ${intervalMs/1000} —Å–µ–∫—É–Ω–¥`)
    
    updateInterval = setInterval(async () => {
      if (!isLoading.value && !isStakeLoading.value && !isReferralLoading.value) {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–µ–π–∫–∞ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...')
        await Promise.all([
          fetchUserData(),
          fetchStakeData(),
          fetchReferralData()
        ])
      }
    }, intervalMs)
  }
  
  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  const stopAutoUpdate = () => {
    if (updateInterval) {
      clearInterval(updateInterval)
      updateInterval = null
      console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    }
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  const initialize = async () => {
    if (isInitialized.value) return
    
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
      
      // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ telegram store
      if (!telegramStore.isInitialized) {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram...')
        // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ telegram
        await new Promise(resolve => setTimeout(resolve, 500))
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Promise.all([
        fetchUserData(),
        fetchStakeData(),
        fetchReferralData()
      ])
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      startAutoUpdate(30000) // 30 —Å–µ–∫—É–Ω–¥
      
      isInitialized.value = true
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', err)
      error.value = err.message || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'
    }
  }
  
  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  const refreshUserData = async () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–µ–π–∫–∞ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...')
    await Promise.all([
      fetchUserData(),
      fetchStakeData(),
      fetchReferralData()
    ])
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ logout –∏–ª–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   */
  const clearUserData = () => {
    stopAutoUpdate()
    userData.value = null
    isInitialized.value = false
    lastUpdated.value = null
    error.value = null
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
    stakeData.value = {
      currentTariff: 'TON',
      tariffName: 'TON',
      tariffIcon: '/icon/ton.svg',
      stakeBalance: 0,
      accumulatedProfit: 0,
      dailyProfitRate: 1.7,
      minAmount: 500,
      maxAmount: 10000,
      balance: 0,
      totalProfit: 0
    }
    stakeLastUpdated.value = null
    stakeError.value = null
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referralData.value = {
      activePartners: 0,
      level1Partners: 0,
      level23Partners: 0,
      totalPartners: 0,
      level1Active: 0,
      level23Active: 0
    }
    referralLastUpdated.value = null
    referralError.value = null
    
    console.log('üßπ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—á–∏—â–µ–Ω—ã')
  }
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userData,
    isLoading,
    isInitialized,
    lastUpdated,
    error,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
    stakeData,
    isStakeLoading,
    stakeLastUpdated,
    stakeError,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referralData,
    isReferralLoading,
    referralLastUpdated,
    referralError,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hasUserData,
    balance,
    stakeBalance,
    profitAll,
    partnersBalance,
    userInfo,
    xpInfo,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
    hasActiveStake,
    canInvest,
    canCollect,
    availableTariff,
    canUpgradeTariff,
    formattedStakeBalance,
    formattedAccumulatedProfit,
    
    // –ú–µ—Ç–æ–¥—ã
    initialize,
    fetchUserData,
    fetchStakeData,
    fetchReferralData,
    updateStakeData,
    refreshUserData,
    startAutoUpdate,
    stopAutoUpdate,
    clearUserData,
    createUserIfNotExists
  }
})







