import { ref, reactive, computed, watch } from 'vue';

// –ö–ª—é—á –¥–ª—è localStorage
const STORAGE_KEY = 'app_notifications';

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notifications = ref([]);
const isInitialized = ref(false);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ localStorage
const initializeFromStorage = () => {
  if (isInitialized.value) return;
  
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      const parsed = JSON.parse(stored);
      if (Array.isArray(parsed)) {
        notifications.value = parsed.filter(n => !n.isRead); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        console.log('üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ localStorage:', notifications.value.length);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ localStorage:', error);
    notifications.value = [];
  }
  
  isInitialized.value = true;
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
const saveToStorage = () => {
  try {
    const allNotifications = [...notifications.value];
    localStorage.setItem(STORAGE_KEY, JSON.stringify(allNotifications));
    console.log('üíæ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', allNotifications.length);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ localStorage:', error);
  }
};

// –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
watch(notifications, saveToStorage, { deep: true });

/**
 * Composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å persistent —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
export function usePersistentNotifications() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  if (!isInitialized.value) {
    initializeFromStorage();
  }

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const pendingNotifications = computed(() => 
    notifications.value.filter(n => !n.isRead)
  );

  const unreadCount = computed(() => pendingNotifications.value.length);

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {Object} notification - –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} notification.title - –∑–∞–≥–æ–ª–æ–≤–æ–∫
   * @param {string} notification.message - —Å–æ–æ–±—â–µ–Ω–∏–µ  
   * @param {'success'|'error'|'info'|'warning'} notification.type - —Ç–∏–ø
   * @param {Object} [notification.details] - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
   * @param {boolean} [notification.persistent=true] - —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ localStorage
   * @param {boolean} [notification.autoClose] - –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ
   */
  const addNotification = (notification) => {
    const newNotification = {
      id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      title: notification.title || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      message: notification.message || '',
      type: notification.type || 'info',
      details: notification.details || null,
      persistent: notification.persistent !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
      autoClose: notification.autoClose,
      timestamp: Date.now(),
      isRead: false,
      createdAt: new Date().toISOString()
    };

    console.log('üîî –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', newNotification);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ (–Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É)
    notifications.value.unshift(newNotification);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∞–∫—Å 20)
    if (notifications.value.length > 20) {
      notifications.value = notifications.value.slice(0, 20);
    }

    return newNotification.id;
  };

  /**
   * –ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
   * @param {string} notificationId - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  const markAsRead = (notificationId) => {
    const notification = notifications.value.find(n => n.id === notificationId);
    if (notification) {
      notification.isRead = true;
      notification.readAt = new Date().toISOString();
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ:', notificationId);
    }
  };

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ (–ø–µ—Ä–≤–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  const getCurrentNotification = () => {
    return pendingNotifications.value[0] || null;
  };

  /**
   * –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @param {string} notificationId - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  const removeNotification = (notificationId) => {
    const index = notifications.value.findIndex(n => n.id === notificationId);
    if (index !== -1) {
      notifications.value.splice(index, 1);
      console.log('üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', notificationId);
    }
  };

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  const clearAllNotifications = () => {
    notifications.value.forEach(n => n.isRead = true);
    console.log('üßπ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
  };

  /**
   * –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  const removeReadNotifications = () => {
    const before = notifications.value.length;
    notifications.value = notifications.value.filter(n => !n.isRead);
    const after = notifications.value.length;
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${before - after}`);
  };

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
   * @param {Object} data - –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
   */
  const addDepositNotification = (data) => {
    const { status, amount, bonus_amount, total_amount, payment_type } = data;
    
    if (status === 'approved') {
      return addNotification({
        type: 'success',
        title: '‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!',
        message: `–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ ${payment_type}`,
        details: {
          amount: amount,
          bonus: bonus_amount,
          total: total_amount
        },
        autoClose: false, // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        persistent: true
      });
    } else if (status === 'rejected') {
      return addNotification({
        type: 'error', 
        title: '‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        message: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${payment_type} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
        details: {
          amount: amount
        },
        autoClose: false,
        persistent: true
      });
    }
  };

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
   * @param {Object} data - –¥–∞–Ω–Ω—ã–µ –æ –±–æ–Ω—É—Å–µ
   */
  const addReferralBonusNotification = (data) => {
    const { amount, referral_username } = data;
    
    return addNotification({
      type: 'success',
      title: 'üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!',
      message: `–ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ @${referral_username}`,
      details: {
        bonus: amount,
        total: amount
      },
      autoClose: false,
      persistent: true
    });
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç API
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
   */
  const checkPendingNotifications = async () => {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É API –Ω–∞ –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  };

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  const getNotificationStats = () => {
    const total = notifications.value.length;
    const unread = pendingNotifications.value.length;
    const read = total - unread;
    
    const byType = {
      success: notifications.value.filter(n => n.type === 'success').length,
      error: notifications.value.filter(n => n.type === 'error').length,
      info: notifications.value.filter(n => n.type === 'info').length,
      warning: notifications.value.filter(n => n.type === 'warning').length
    };

    return {
      total,
      unread,
      read,
      byType
    };
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    notifications: notifications,
    pendingNotifications,
    unreadCount,
    
    // –ú–µ—Ç–æ–¥—ã
    addNotification,
    markAsRead,
    getCurrentNotification,
    removeNotification,
    clearAllNotifications,
    removeReadNotifications,
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    addDepositNotification,
    addReferralBonusNotification,
    checkPendingNotifications,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getNotificationStats
  };
}
