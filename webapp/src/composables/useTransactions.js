import { ref, computed, onMounted, onUnmounted } from 'vue';
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://127.0.0.1:8000';

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è live —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const liveTransactions = ref([]);
const isLoading = ref(false);
const error = ref(null);
const lastUpdateTime = ref(null);

// –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let refreshInterval = null;

/**
 * Composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å live —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
 */
export function useTransactions() {
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
   */
  const fetchLiveTransactions = async (limit = 5) => {
    if (isLoading.value) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    
    isLoading.value = true;
    error.value = null;
    
    try {
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ live —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
      
      const response = await axios.get(`${API_BASE_URL}/api/transactions/live`, {
        params: { limit },
        timeout: 5000
      });
      
      if (response.data && response.data.success) {
        const newTransactions = response.data.data || [];
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${newTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        liveTransactions.value = newTransactions;
        lastUpdateTime.value = new Date();
        
        return {
          success: true,
          data: newTransactions,
          count: newTransactions.length
        };
      } else {
        throw new Error(response.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è live —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', err);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π';
      
      if (err.response) {
        errorMessage = err.response.data?.message || `HTTP ${err.response.status}`;
      } else if (err.request) {
        errorMessage = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
      } else {
        errorMessage = err.message;
      }
      
      error.value = errorMessage;
      
      return {
        success: false,
        error: errorMessage,
        data: []
      };
      
    } finally {
      isLoading.value = false;
    }
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  const fetchTransactionStats = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/transactions/stats`, {
        timeout: 5000
      });
      
      if (response.data && response.data.success) {
        return response.data.data;
      } else {
        throw new Error(response.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', err);
      return null;
    }
  };

  /**
   * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   * @param {number} intervalMs - –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥)
   */
  const startAutoRefresh = (intervalMs = 10000) => {
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∞–∂–¥—ã–µ ${intervalMs / 1000} —Å–µ–∫—É–Ω–¥`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    fetchLiveTransactions();
    
    // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    refreshInterval = setInterval(() => {
      fetchLiveTransactions();
    }, intervalMs);
  };

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const stopAutoRefresh = () => {
    if (refreshInterval) {
      console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      clearInterval(refreshInterval);
      refreshInterval = null;
    }
  };

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @param {Object} transaction - –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  const addTransaction = (transaction) => {
    const newTransaction = {
      id: `test_${Date.now()}`,
      time: new Date().toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit', 
        second: '2-digit' 
      }),
      timestamp: Date.now() / 1000,
      ...transaction
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    liveTransactions.value.unshift(newTransaction);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (liveTransactions.value.length > 50) {
      liveTransactions.value = liveTransactions.value.slice(0, 50);
    }
    
    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', newTransaction);
  };

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É
   * @param {string} type - –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ('deposit', 'withdrawal', 'all')
   */
  const getTransactionsByType = (type = 'all') => {
    if (type === 'all') {
      return liveTransactions.value;
    }
    
    return liveTransactions.value.filter(transaction => transaction.type === type);
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  const getLatestTransaction = () => {
    return liveTransactions.value[0] || null;
  };

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const transactionCount = computed(() => liveTransactions.value.length);
  const depositCount = computed(() => 
    liveTransactions.value.filter(t => t.type === 'deposit').length
  );
  const withdrawalCount = computed(() => 
    liveTransactions.value.filter(t => t.type === 'withdrawal').length
  );

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const lastUpdateFormatted = computed(() => {
    if (!lastUpdateTime.value) return null;
    
    return lastUpdateTime.value.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit', 
      second: '2-digit'
    });
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–∞–≤–Ω–æ –ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
  const isDataStale = computed(() => {
    if (!lastUpdateTime.value) return true;
    
    const now = new Date();
    const diffMinutes = (now - lastUpdateTime.value) / (1000 * 60);
    
    return diffMinutes > 2; // –°—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ > 2 –º–∏–Ω—É—Ç
  });

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    liveTransactions,
    isLoading,
    error,
    lastUpdateTime,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    transactionCount,
    depositCount, 
    withdrawalCount,
    lastUpdateFormatted,
    isDataStale,
    
    // –ú–µ—Ç–æ–¥—ã
    fetchLiveTransactions,
    fetchTransactionStats,
    startAutoRefresh,
    stopAutoRefresh,
    addTransaction,
    getTransactionsByType,
    getLatestTransaction
  };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
export function createTestTransaction(type = 'deposit') {
  const cryptoOptions = [
    { name: 'TON', icon: '/icon/ton.svg', color: 'rgb(0, 176, 219)' },
    { name: 'ETH', icon: '/icon/eth.svg', color: 'rgb(17, 192, 167)' },
    { name: 'BTC', icon: '/icon/btc.svg', color: 'rgb(247, 147, 26)' },
    { name: 'USDT', icon: '/icon/teher.webp', color: 'rgb(115, 93, 237)' },
    { name: '–°–ë–ü', icon: '/icon/sbp2.svg', color: 'rgb(0, 176, 219)' }
  ];
  
  const crypto = cryptoOptions[Math.floor(Math.random() * cryptoOptions.length)];
  const amount = Math.floor(Math.random() * 5000) + 100; // –û—Ç 100 –¥–æ 5100‚ÇΩ
  
  return {
    type: type,
    typeText: type === 'deposit' ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' : '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
    borderColor: crypto.color,
    cryptoName: crypto.name,
    cryptoClass: '',
    cryptoIcon: crypto.icon,
    amount: `${type === 'deposit' ? '+' : '-'}${amount}‚ÇΩ`,
    username: `user${Math.floor(Math.random() * 1000)}`,
    telegram_id: Math.floor(Math.random() * 1000000)
  };
}
