/**
 * –ö–æ–º–ø–æ–∑–∞–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–µ–π–∫–∏–Ω–≥–æ–º
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–±–æ—Ä–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */

import { ref, computed, onMounted, onUnmounted } from 'vue'
import { useTelegramStore } from '../stores/telegram.js'
import { useApi } from './useApi.js'

export function useStake() {
  const telegramStore = useTelegramStore()
  const api = useApi()
  
  // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const stakeData = ref({
    currentTariff: 'TON',
    tariffName: 'TON',
    tariffIcon: '/icon/ton.svg',
    stakeBalance: 0,
    accumulatedProfit: 0,
    dailyProfitRate: 1.7,
    minAmount: 500,
    maxAmount: 10000,
    balance: 0,
    totalProfit: 0
  })
  
  const availableTariffs = ref([])
  const isLoading = ref(false)
  const error = ref(null)
  const isInvesting = ref(false)
  const isCollecting = ref(false)
  
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
  let profitUpdateInterval = null
  const PROFIT_UPDATE_INTERVAL = 10000 // 10 —Å–µ–∫—É–Ω–¥
  
  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const formattedStakeBalance = computed(() => {
    return stakeData.value.stakeBalance.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    })
  })
  
  const formattedAccumulatedProfit = computed(() => {
    return stakeData.value.accumulatedProfit.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 6
    })
  })
  
  const formattedBalance = computed(() => {
    return stakeData.value.balance.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    })
  })
  
  const canInvest = computed(() => {
    return stakeData.value.balance >= stakeData.value.minAmount
  })
  
  const canCollect = computed(() => {
    return stakeData.value.accumulatedProfit > 0
  })
  
  const hasActiveStake = computed(() => {
    return stakeData.value.stakeBalance > 0
  })
  
  const profitPercentage = computed(() => {
    if (stakeData.value.stakeBalance <= 0) return 0
    return ((stakeData.value.accumulatedProfit / stakeData.value.stakeBalance) * 100).toFixed(4)
  })
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç Telegram ID –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  const getTelegramId = () => {
    return telegramStore.userId || 
           telegramStore.user?.id || 
           telegramStore.initDataUnsafe?.user?.id ||
           123456789 // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–µ–π–∫–∏–Ω–≥–∞
   */
  const loadStakeStats = async () => {
    try {
      isLoading.value = true
      error.value = null
      
      const telegramId = getTelegramId()
      console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId)
      
      const response = await api.get(`/api/stake/stats?telegram_id=${telegramId}`)
      
      if (response.success && response.data) {
        stakeData.value = {
          currentTariff: response.data.current_tariff,
          tariffName: response.data.tariff_name,
          tariffIcon: response.data.tariff_icon,
          stakeBalance: response.data.stake_balance,
          accumulatedProfit: response.data.accumulated_profit,
          dailyProfitRate: response.data.daily_profit_rate,
          minAmount: response.data.min_amount,
          maxAmount: response.data.max_amount,
          balance: response.data.balance,
          totalProfit: response.data.total_profit
        }
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stakeData.value)
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞:', err)
      error.value = err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      stakeData.value = {
        currentTariff: 'TON',
        tariffName: 'TON',
        tariffIcon: '/icon/ton.svg',
        stakeBalance: 0,
        accumulatedProfit: 0,
        dailyProfitRate: 1.7,
        minAmount: 500,
        maxAmount: 10000,
        balance: 0,
        totalProfit: 0
      }
    } finally {
      isLoading.value = false
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
   */
  const loadAvailableTariffs = async () => {
    try {
      console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤...')
      
      const response = await api.get('/api/stake/tariffs')
      
      if (response.success && response.data) {
        availableTariffs.value = response.data.tariffs
        console.log('‚úÖ –¢–∞—Ä–∏—Ñ—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', availableTariffs.value)
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤')
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤:', err)
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã
      availableTariffs.value = [
        {
          code: 'TON',
          name: 'TON',
          icon: '/icon/ton.svg',
          min_amount: 500,
          max_amount: 10000,
          daily_profit: 1.7,
          balance_threshold: 0
        }
      ]
    }
  }
  
  /**
   * –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å—Ç–µ–π–∫–∏–Ω–≥
   */
  const investInStake = async (amount) => {
    try {
      isInvesting.value = true
      error.value = null
      
      const telegramId = getTelegramId()
      const numAmount = parseFloat(amount)
      
      if (isNaN(numAmount) || numAmount <= 0) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
      }
      
      if (numAmount < stakeData.value.minAmount) {
        throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${stakeData.value.minAmount}`)
      }
      
      if (numAmount > stakeData.value.maxAmount) {
        throw new Error(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${stakeData.value.maxAmount}`)
      }
      
      if (numAmount > stakeData.value.balance) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')
      }
      
      console.log('üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–µ–π–∫–∏–Ω–≥:', { telegramId, amount: numAmount })
      
      const response = await api.post('/api/stake/invest', {
        telegram_id: telegramId,
        amount: numAmount
      })
      
      if (response.success) {
        console.log('‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', response.data)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        stakeData.value.balance = response.data.new_balance
        stakeData.value.stakeBalance = response.data.new_stake_balance
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (telegramStore.isInitialized) {
          telegramStore.showAlert(`–£—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ ${numAmount} ‚ÇΩ`)
          telegramStore.hapticFeedback('success')
        }
        
        return response.data
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err)
      error.value = err.message || '–û—à–∏–±–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      
      if (telegramStore.isInitialized) {
        telegramStore.showAlert(error.value)
      }
      
      throw err
    } finally {
      isInvesting.value = false
    }
  }
  
  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å
   */
  const collectProfit = async () => {
    try {
      isCollecting.value = true
      error.value = null
      
      const telegramId = getTelegramId()
      
      if (stakeData.value.accumulatedProfit <= 0) {
        throw new Error('–ù–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —Å–±–æ—Ä–∞')
      }
      
      console.log('üè¶ –°–±–æ—Ä –ø—Ä–∏–±—ã–ª–∏ —Å–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId)
      
      const response = await api.post(`/api/stake/collect?telegram_id=${telegramId}`)
      
      if (response.success) {
        console.log('‚úÖ –ü—Ä–∏–±—ã–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞:', response.data)
        
        const collectedAmount = response.data.collected_amount
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        stakeData.value.balance = response.data.new_balance
        stakeData.value.accumulatedProfit = 0
        stakeData.value.totalProfit = response.data.total_profit
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (telegramStore.isInitialized) {
          telegramStore.showAlert(`–°–æ–±—Ä–∞–Ω–æ ${collectedAmount.toFixed(6)} ‚ÇΩ –ø—Ä–∏–±—ã–ª–∏`)
          telegramStore.hapticFeedback('success')
        }
        
        return response.data
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø—Ä–∏–±—ã–ª–∏')
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø—Ä–∏–±—ã–ª–∏:', err)
      error.value = err.message || '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø—Ä–∏–±—ã–ª–∏'
      
      if (telegramStore.isInitialized) {
        telegramStore.showAlert(error.value)
      }
      
      throw err
    } finally {
      isCollecting.value = false
    }
  }
  
  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  const refreshStakeData = async () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–µ–π–∫–∏–Ω–≥–∞...')
    await loadStakeStats()
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
   */
  const startProfitUpdates = () => {
    if (profitUpdateInterval) {
      clearInterval(profitUpdateInterval)
    }
    
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏')
    
    profitUpdateInterval = setInterval(async () => {
      if (hasActiveStake.value && !isLoading.value) {
        try {
          await loadStakeStats()
        } catch (err) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:', err)
        }
      }
    }, PROFIT_UPDATE_INTERVAL)
  }
  
  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
   */
  const stopProfitUpdates = () => {
    if (profitUpdateInterval) {
      console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏')
      clearInterval(profitUpdateInterval)
      profitUpdateInterval = null
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –ø–æ –∫–æ–¥—É
   */
  const getTariffInfo = (tariffCode) => {
    return availableTariffs.value.find(t => t.code === tariffCode) || availableTariffs.value[0]
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  const formatAmount = (amount, decimals = 2) => {
    return parseFloat(amount).toLocaleString('ru-RU', {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    })
  }
  
  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –¥–Ω–µ–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å
   */
  const calculateDailyProfit = (amount) => {
    const numAmount = parseFloat(amount)
    if (isNaN(numAmount) || numAmount <= 0) return 0
    
    return (numAmount * stakeData.value.dailyProfitRate / 100).toFixed(6)
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–æ–∑–∞–±–ª–∞
  onMounted(async () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∞–±–ª–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞')
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await Promise.all([
      loadStakeStats(),
      loadAvailableTariffs()
    ])
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–π–∫
    if (hasActiveStake.value) {
      startProfitUpdates()
    }
  })
  
  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  onUnmounted(() => {
    stopProfitUpdates()
  })
  
  return {
    // –î–∞–Ω–Ω—ã–µ
    stakeData,
    availableTariffs,
    isLoading,
    error,
    isInvesting,
    isCollecting,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    formattedStakeBalance,
    formattedAccumulatedProfit,
    formattedBalance,
    canInvest,
    canCollect,
    hasActiveStake,
    profitPercentage,
    
    // –ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    loadStakeStats,
    loadAvailableTariffs,
    refreshStakeData,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    investInStake,
    collectProfit,
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    startProfitUpdates,
    stopProfitUpdates,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getTariffInfo,
    formatAmount,
    calculateDailyProfit,
    getTelegramId
  }
}

export default useStake
